---
# tasks file for skill
- name: Wait for APT Lock
  shell: |
    while sudo fuser /var/lib/dpkg/{{ lockfilename }} >/dev/null 2>&1; do sleep 5; done;
    while sudo fuser /var/lib/apt/lists/lock >/dev/null 2>&1; do sleep 5; done;

- name: "Update apt cache & install packages to allow apt to use a repository over HTTPS"
  ansible.builtin.apt:
    name: "{{ packages }}"
    state: present
    update_cache: yes

- name: "Make directory for Docker’s official GPG key"
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: "Add Docker’s official GPG key"
  ansible.builtin.shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  changed_when: false

- name: "Set up the repository"
  ansible.builtin.shell: |
    echo \
    "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
    "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  changed_when: false

- name: "Update the apt package index & Install Docker Engine, containerd, and Docker Compose"
  ansible.builtin.apt:
    name: "{{ dpackages }}"
    state: present
    update_cache: true

- name: Install requirements
  ansible.builtin.pip:
    name: "{{ python_moduls }}"

# Eliminate error 'http: server gave HTTP response to HTTPS client while pulling from registry'
- name: Template docker config
  ansible.builtin.template:
    src: templates/daemon.json.j2
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: "0640"

- name: "Enable docker service"
  ansible.builtin.service:
    name: docker
    enabled: true
    state: reloaded

- name: Add the user 'ubuntu' to the group 'docker'
  ansible.builtin.user:
    name: ubuntu
    groups: docker
    append: true

- name: Add nodes to the swarm
  community.docker.docker_swarm:
    state: join
    join_token: "{{ hostvars['adm_0']['result']['swarm_facts']['JoinTokens']['Worker'] }}"
    remote_addrs: [ "{{ hostvars['adm_0']['ansible_default_ipv4']['address'] }}:2377" ]
  when: add_nodes_to_swarm

- name: Set node label
  community.docker.docker_node:
    hostname: "{{ ansible_nodename }}"
    labels:
      "host": "{{ inventory_hostname }}"
  when: add_nodes_to_swarm

- name: Copy file with tests
  ansible.builtin.copy:
    src: test.py
    dest: /tmp/
    mode: "0755"

- name: Start test
  ansible.builtin.command: pytest -v /tmp/test.py
  changed_when: false
